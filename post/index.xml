<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Partisan</title>
    <link>http://partisan.cloud/post/</link>
    <description>Recent content in Posts on Partisan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://partisan.cloud/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Partisan</title>
      <link>http://partisan.cloud/post/01-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://partisan.cloud/post/01-intro/</guid>
      <description>Partisan is the the design of an alternative runtime system for improved scalability and reduced latency in actor applications.
Partisan provides:
 Better scalability by leveraging different network topologies for communication Reduced latency through efficient parallel message scheduling for actor-to-actor communication  Partisan is provided as a user library in Erlang and achieves up to an order of magnitude increase in the number of nodes the system can scale to through runtime overlay selection, up to a 34.</description>
    </item>
    
    <item>
      <title>Microbenchmarks</title>
      <link>http://partisan.cloud/post/02-microbenchmarks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://partisan.cloud/post/02-microbenchmarks/</guid>
      <description>Each of the microbenchmarks run multiple configurations of Partisan under both increasing latency and payload size, with a fixed number of 10,000 messages per experiment. At the start of each experiment for our microbenchmarks, N actors are spawned on each of two instances of the Erlang VM, based on the desired concurrency level. Each actor will send a single message to an actor on the other node and wait for acknowledgement before proceeding.</description>
    </item>
    
    <item>
      <title>Scaling Riak Core</title>
      <link>http://partisan.cloud/post/03-throughput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://partisan.cloud/post/03-throughput/</guid>
      <description>To look at read-world applicability, we ported the distributed systems framework, Riak Core, to Partisan and built two example applications: (i) a simple echo service – an application that’s designed to only be bound by the speed of the actor receiving messages and the network itself; and (ii) a memory-based key-value store that operates using read/write quorums – more representative of a workload where more data is being transmitted and more CPU work has to occur.</description>
    </item>
    
    <item>
      <title>Cluster Scalability: Lasp</title>
      <link>http://partisan.cloud/post/04-scaling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://partisan.cloud/post/04-scaling/</guid>
      <description>Lasp is a programming framework designed for large scale coordination-free programming. Applications in Lasp are written using shared state; this shared state is stored in an underlying key-value store and is replicated between all nodes. Applications modify their own replica and propagate the effects of their changes to their peers. Lasp ensures that applications converge to the same result on every node through the use of data structures known as Conflict-Free Replicated Data Types, combined with monotone programming.</description>
    </item>
    
    <item>
      <title>Availability</title>
      <link>http://partisan.cloud/post/05-conclusion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://partisan.cloud/post/05-conclusion/</guid>
      <description>Partisan&amp;rsquo;s design choices assume a lowest-common-denominator strategy: these optimizations should be beneficial for any of the major distributed actor systems: Distributed Erlang, Scala&amp;rsquo;s Akka, or Microsoft&amp;rsquo;s Orleans. However, if you&amp;rsquo;re using Erlang or Elixir, you can take advantage of Partisan immediately using our library-based reference implementation available on GitHub!</description>
    </item>
    
  </channel>
</rss>